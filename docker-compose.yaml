version: "3.7"
services:

  consul:
    image: consul
    command: consul agent -server -dev -client=0.0.0.0 -ui -bootstrap -log-level warn
    ports:
      - "8400:8400"
      - "8500:8500"
      - "8600:53/udp"

  registrator:
    image: gliderlabs/registrator:latest
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    depends_on:
      - consul
    command: -internal consul://consul:8500

  reverse-proxy:
    image: traefik
    command: --api --consulcatalog.endpoint=consul:8500
    ports:
      - 8080:8080
      - 80:80
    volumes:
      - ./traefik.toml:/etc/traefik/traefik.toml
    depends_on:
      - registrator

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "15672:15672"
      - "5672:5672"
<<<<<<< HEAD
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1
=======

  inventory_db:
    image: mongo
    ports:
      - "27017:27017"

  inventory:
    build:
      context: ./inventory
    expose:
      - "5000"
    environment:
      - SERVICE_TAGS=traefik.enable=true,traefik.frontend.entryPoints=http,traefik.frontend.rule=Host:inventory.docker.localhost,traefik.backend=inventory,traefik.backend.circuitbreaker.expression=NetworkErrorRatio()>0.5
    depends_on:
      - rabbitmq
      - inventory_db

  users:
    build:
      context: ./users
    expose:
      - "5000"
    environment:
      - SERVICE_TAGS=traefik.enable=true,traefik.frontend.entryPoints=http,traefik.frontend.rule=Host:users.docker.localhost,traefik.backend=users,traefik.backend.circuitbreaker.expression=NetworkErrorRatio()>0.5
    depends_on:
      - rabbitmq

  auth:
    build:
      context: ./auth
    expose:
      - "5000"
    environment:
      - SERVICE_TAGS=traefik.enable=true,traefik.frontend.entryPoints=http,traefik.frontend.rule=Host:auth.docker.localhost,traefik.backend=auth,traefik.backend.circuitbreaker.expression=NetworkErrorRatio()>0.5
    depends_on:
      - rabbitmq
>>>>>>> da4e206cf1e19fc83243222b93e23221420a5729

  orders:
    build:
      context: ./orders
    expose:
      - "5000"
    environment:
      - SERVICE_TAGS=traefik.enable=true,traefik.frontend.entryPoints=http,traefik.frontend.rule=Host:orders.docker.localhost,traefik.backend=orders,traefik.backend.circuitbreaker.expression=NetworkErrorRatio()>0.5
    depends_on:
      - order_db
      - rabbitmq

  order_db:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=orders_micro

